bty = "n",
inset=c(0.5,-.3))
par(mar=c(5,12,5,8), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.20,-.3))
par(mar=c(5,12,5,8), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.18,-.3))
par(mar=c(5,12,5,8), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3))
par(mar=c(5,12,5,8), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5,
border = NA)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3))
par(mar=c(5,12,5,8), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5,
border = NA,
axes = FALSE)
is:
axis(side = 1,
lwd = 0)
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3))
par(mar=c(5,12,5,3), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = x.label,
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5,
border = NA,
axes = FALSE)
# Add horizontal axis:
axis(side = 1, lwd = 0)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3))
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
par(mar=c(5,12,5,3), xpd = TRUE)
barplot(x,
xlim = c(0,100),
names.arg = sapply(x.labels,
function(s) paste(strwrap(s, 28),
collapse = "\n"),
USE.NAMES = FALSE),
las = 1,
legend.text = FALSE,
horiz = TRUE,
col = x.color,
xlab = "percent",
width = 0.75,
space = 0.5,
border = NA,
axes = FALSE)
# Add horizontal axis:
axis(side = 1, lwd = 0)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3))
source('Code/f_h_barplot_stacked.r')
source('Code/f_h_barplot_stacked.r')
h_barplot_stacked(x,x.labels,x.color)
x
h_barplot_stacked(x = x,x.labels,x.color)
source('Code/f_h_barplot_stacked.r')
h_barplot_stacked(x = x,x.labels,x.color)
svg(filename="PlotTX.RespondentsByRegion.svg", width=6, height=4)
h_barplot_stacked(x = x,x.labels,x.color)
dev.off()
svg(filename="test_H_bar.svg", width=6, height=4)
h_barplot_stacked(x = x,x.labels,x.color)
dev.off()
brewer.pal(nrow(x),"Blues")[nrow(x):1]
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
if(X[!is.na(Group),.N] == 0){
x <- X[,x]
x.labels <- X[,Answer]
x.color <- "#3182BD"
} else {
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
}
type
View(data)
View(plotTypes)
distinct(plotTypes[,Plot.type])
distinct(plotTypes[,Plot.Type])
plotTypes[,Plot.Type]
distinct(plotTypes[,Plot.Type])
unique(plotTypes[,Plot.Type])
source('Code/f_doughnut2.r')
i <- 1
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
X[!is.na(Group),.N] == 0
x <- X[,x]
x.labels <- X[,Answer]
x.color <- "#3182BD"
x
x.labels
x.color
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
x <- X[,x]
x.labels <- X[,Answer]
x.color <- "#3182BD"
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
dev.off()
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
dev.off()
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/Documents/GitHub/un50sc-foc-fpos/Analysis/")
# load functions
source('Code/f_read.tab2dataTable.r')
source('Code/f_writeTable2tab.r')
source('Code/f_h_barplot_stacked.r')
source('Code/f_doughnut.r')
source('Code/f_doughnut2.r')
data <- read.tab2dataTable("Data/PlotsData.txt")
plotTypes   <- read.tab2dataTable("Data/PlotsTypes.txt")
i <- 1
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
if(X[!is.na(Group),.N] == 0){
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
} else {
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
}
# "Horizontal bars"
# "Vertical bars - side by side"
# "Vertical bars"
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
dev.off()
source('Code/f_doughnut.r')
source('Code/f_doughnut2.r')
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
if(X[!is.na(Group),.N] == 0){
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
} else {
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
}
# "Horizontal bars"
# "Vertical bars - side by side"
# "Vertical bars"
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color)
}
dev.off()
x
sum(x[x<8]>0)
x.legend
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
x.legend <- x.labels
x.legend
source('Code/f_doughnut2.r')
source('Code/f_doughnut2.r')
data <- read.tab2dataTable("Data/PlotsData.txt")
plotTypes   <- read.tab2dataTable("Data/PlotsTypes.txt")
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
if(X[!is.na(Group),.N] == 0){
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
x.legend <- x.labels
} else {
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
}
# "Horizontal bars"
# "Vertical bars - side by side"
# "Vertical bars"
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color, x.legend)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color, x.legend)
}
source('Code/f_doughnut2.r')
type <- plotTypes[i,Plot.Type]
qID <- plotTypes[i,QuestionID]
X <- data[QuestionID == qID,list(Group, Answer, x = TOTAL)]
if(X[!is.na(Group),.N] == 0){
x <- X[,x]
x.labels <- X[,Answer]
x.color  <- brewer.pal(length(x),"Blues")[length(x):1]
x.legend <- x.labels
} else {
x <- as.matrix(dcast(X, Answer ~ Group, value.var = "x")[,-1,with=FALSE])
x[is.na(x)] <- 0
x <- x[nrow(x):1,]
x.labels  <- colnames(x)
x.legend <- dcast(X, Answer ~ Group, value.var = "x")[nrow(x):1,Answer]
x.color  <- brewer.pal(nrow(x),"Blues")[nrow(x):1]
}
# "Horizontal bars"
# "Vertical bars - side by side"
# "Vertical bars"
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color, x.legend)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color, x.legend)
}
dev.off()
doughnut2(x, x.labels, x.color, x.legend)
sum(x[x<8]>0)
x[x<8]
sum(x>8)
sum(x>8)>0
doughnut2 <-
function (x, x.labels, x.color, x.legend)
{
print.labels <- x.labels
print.labels[x<8] <- ""
if(sum(x<8)>0){
par(mar=c(0,0,5,0), xpd = TRUE)
# Add legend to top right, outside plot region
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3)
)
} else {
par(mar=c(0,0,0,0), xpd = TRUE)
}
doughnut(x = x,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1)
}
doughnut2(x, x.labels, x.color, x.legend)
doughnut2(x, x.labels, x.color, x.legend)
print.labels <- x.labels
print.labels[x<8] <- ""
sum(x<8)>0
par(mar=c(0,0,5,0), xpd = TRUE)
legend("topright",
horiz = TRUE,
legend=x.legend,
fill = x.color,
bty = "n",
inset=c(0.225,-.3)
)
doughnut(x = x,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1)
if(sum(x<8)>0){
par(mar=c(0,0,5,0), xpd = TRUE)
} else {
par(mar=c(0,0,0,0), xpd = TRUE)
}
doughnut(x = x,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1)
x
doughnut(x ,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1)
par
par(mar)
par(mar=c(0,0,0,0), xpd = FALSE)
,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1
x
x.labels
x.color
doughnut(x ,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
lty = NULL,
main = NULL,
cex = 1)
doughnut(x ,
labels = sapply(x.labels,
function(s) paste(strwrap(s, 15),
collapse = "\n"),
USE.NAMES = FALSE),
edges = 1000,
outer.radius = 0.70,
inner.radius=0.35,
col = x.color,
border = FALSE,
cex = 1)
svg(filename="test_doughnut.svg", width=6, height=4)
if(type == "Horizontal bars - stacked"){
h_barplot_stacked(x,x.labels,x.color, x.legend)
} else if (type == "Doughnut") {
doughnut2(x, x.labels, x.color, x.legend)
}
dev.off()
dev.off()
